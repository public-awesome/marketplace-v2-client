/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { AllowDenoms, InstantiateMsg, ConfigForString, ExecuteMsg, Uint128, OrderDetailsForString, Coin, QueryMsg, QueryBoundForPriceOffset, QueryBoundForString, QueryOptionsForPriceOffset, PriceOffset, QueryOptionsForString, NullableAsk, Addr, Ask, OrderDetailsForAddr, ArrayOfAsk, NullableBid, Bid, ArrayOfBid, NullableCollectionBid, CollectionBid, ArrayOfCollectionBid, ConfigForAddr } from "./MarketplaceV2.types";
import { MarketplaceV2QueryClient } from "./MarketplaceV2.client";
export const marketplaceV2QueryKeys = {
  contract: ([{
    contract: "marketplaceV2"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...marketplaceV2QueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  allowDenoms: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "allow_denoms",
    args
  }] as const),
  ask: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "ask",
    args
  }] as const),
  asks: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "asks",
    args
  }] as const),
  asksByCollectionDenom: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "asks_by_collection_denom",
    args
  }] as const),
  asksByCreatorCollection: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "asks_by_creator_collection",
    args
  }] as const),
  bid: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "bid",
    args
  }] as const),
  bids: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "bids",
    args
  }] as const),
  bidsByTokenPrice: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "bids_by_token_price",
    args
  }] as const),
  bidsByCreatorCollection: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "bids_by_creator_collection",
    args
  }] as const),
  collectionBid: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "collection_bid",
    args
  }] as const),
  collectionBids: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "collection_bids",
    args
  }] as const),
  collectionBidsByPrice: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "collection_bids_by_price",
    args
  }] as const),
  collectionBidsByCreatorCollection: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "collection_bids_by_creator_collection",
    args
  }] as const)
};
export const marketplaceV2Queries = {
  config: <TData = ConfigForAddr,>({
    client,
    options
  }: MarketplaceV2ConfigQuery<TData>): UseQueryOptions<ConfigForAddr, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allowDenoms: <TData = AllowDenoms,>({
    client,
    options
  }: MarketplaceV2AllowDenomsQuery<TData>): UseQueryOptions<AllowDenoms, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.allowDenoms(client?.contractAddress),
    queryFn: () => client ? client.allowDenoms() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ask: <TData = NullableAsk,>({
    client,
    options
  }: MarketplaceV2AskQuery<TData>): UseQueryOptions<NullableAsk, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.ask(client?.contractAddress),
    queryFn: () => client ? client.ask() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  asks: <TData = ArrayOfAsk,>({
    client,
    options
  }: MarketplaceV2AsksQuery<TData>): UseQueryOptions<ArrayOfAsk, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.asks(client?.contractAddress),
    queryFn: () => client ? client.asks() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  asksByCollectionDenom: <TData = ArrayOfAsk,>({
    client,
    args,
    options
  }: MarketplaceV2AsksByCollectionDenomQuery<TData>): UseQueryOptions<ArrayOfAsk, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.asksByCollectionDenom(client?.contractAddress, args),
    queryFn: () => client ? client.asksByCollectionDenom({
      collection: args.collection,
      denom: args.denom,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  asksByCreatorCollection: <TData = ArrayOfAsk,>({
    client,
    args,
    options
  }: MarketplaceV2AsksByCreatorCollectionQuery<TData>): UseQueryOptions<ArrayOfAsk, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.asksByCreatorCollection(client?.contractAddress, args),
    queryFn: () => client ? client.asksByCreatorCollection({
      collection: args.collection,
      creator: args.creator,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  bid: <TData = NullableBid,>({
    client,
    options
  }: MarketplaceV2BidQuery<TData>): UseQueryOptions<NullableBid, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.bid(client?.contractAddress),
    queryFn: () => client ? client.bid() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  bids: <TData = ArrayOfBid,>({
    client,
    options
  }: MarketplaceV2BidsQuery<TData>): UseQueryOptions<ArrayOfBid, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.bids(client?.contractAddress),
    queryFn: () => client ? client.bids() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  bidsByTokenPrice: <TData = ArrayOfBid,>({
    client,
    args,
    options
  }: MarketplaceV2BidsByTokenPriceQuery<TData>): UseQueryOptions<ArrayOfBid, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.bidsByTokenPrice(client?.contractAddress, args),
    queryFn: () => client ? client.bidsByTokenPrice({
      collection: args.collection,
      denom: args.denom,
      queryOptions: args.queryOptions,
      tokenId: args.tokenId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  bidsByCreatorCollection: <TData = ArrayOfBid,>({
    client,
    args,
    options
  }: MarketplaceV2BidsByCreatorCollectionQuery<TData>): UseQueryOptions<ArrayOfBid, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.bidsByCreatorCollection(client?.contractAddress, args),
    queryFn: () => client ? client.bidsByCreatorCollection({
      collection: args.collection,
      creator: args.creator,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  collectionBid: <TData = NullableCollectionBid,>({
    client,
    options
  }: MarketplaceV2CollectionBidQuery<TData>): UseQueryOptions<NullableCollectionBid, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.collectionBid(client?.contractAddress),
    queryFn: () => client ? client.collectionBid() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  collectionBids: <TData = ArrayOfCollectionBid,>({
    client,
    options
  }: MarketplaceV2CollectionBidsQuery<TData>): UseQueryOptions<ArrayOfCollectionBid, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.collectionBids(client?.contractAddress),
    queryFn: () => client ? client.collectionBids() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  collectionBidsByPrice: <TData = ArrayOfCollectionBid,>({
    client,
    args,
    options
  }: MarketplaceV2CollectionBidsByPriceQuery<TData>): UseQueryOptions<ArrayOfCollectionBid, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.collectionBidsByPrice(client?.contractAddress, args),
    queryFn: () => client ? client.collectionBidsByPrice({
      collection: args.collection,
      denom: args.denom,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  collectionBidsByCreatorCollection: <TData = ArrayOfCollectionBid,>({
    client,
    args,
    options
  }: MarketplaceV2CollectionBidsByCreatorCollectionQuery<TData>): UseQueryOptions<ArrayOfCollectionBid, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.collectionBidsByCreatorCollection(client?.contractAddress, args),
    queryFn: () => client ? client.collectionBidsByCreatorCollection({
      collection: args.collection,
      creator: args.creator,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface MarketplaceV2ReactQuery<TResponse, TData = TResponse> {
  client: MarketplaceV2QueryClient | undefined;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface MarketplaceV2CollectionBidsByCreatorCollectionQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfCollectionBid, TData> {
  args: {
    collection: string;
    creator: string;
    queryOptions?: QueryOptionsForString;
  };
}
export function useMarketplaceV2CollectionBidsByCreatorCollectionQuery<TData = ArrayOfCollectionBid>({
  client,
  args,
  options
}: MarketplaceV2CollectionBidsByCreatorCollectionQuery<TData>) {
  return useQuery<ArrayOfCollectionBid, Error, TData>(marketplaceV2QueryKeys.collectionBidsByCreatorCollection(client?.contractAddress, args), () => client ? client.collectionBidsByCreatorCollection({
    collection: args.collection,
    creator: args.creator,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2CollectionBidsByPriceQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfCollectionBid, TData> {
  args: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPriceOffset;
  };
}
export function useMarketplaceV2CollectionBidsByPriceQuery<TData = ArrayOfCollectionBid>({
  client,
  args,
  options
}: MarketplaceV2CollectionBidsByPriceQuery<TData>) {
  return useQuery<ArrayOfCollectionBid, Error, TData>(marketplaceV2QueryKeys.collectionBidsByPrice(client?.contractAddress, args), () => client ? client.collectionBidsByPrice({
    collection: args.collection,
    denom: args.denom,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2CollectionBidsQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfCollectionBid, TData> {}
export function useMarketplaceV2CollectionBidsQuery<TData = ArrayOfCollectionBid>({
  client,
  options
}: MarketplaceV2CollectionBidsQuery<TData>) {
  return useQuery<ArrayOfCollectionBid, Error, TData>(marketplaceV2QueryKeys.collectionBids(client?.contractAddress), () => client ? client.collectionBids() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2CollectionBidQuery<TData> extends MarketplaceV2ReactQuery<NullableCollectionBid, TData> {}
export function useMarketplaceV2CollectionBidQuery<TData = NullableCollectionBid>({
  client,
  options
}: MarketplaceV2CollectionBidQuery<TData>) {
  return useQuery<NullableCollectionBid, Error, TData>(marketplaceV2QueryKeys.collectionBid(client?.contractAddress), () => client ? client.collectionBid() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2BidsByCreatorCollectionQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfBid, TData> {
  args: {
    collection: string;
    creator: string;
    queryOptions?: QueryOptionsForString;
  };
}
export function useMarketplaceV2BidsByCreatorCollectionQuery<TData = ArrayOfBid>({
  client,
  args,
  options
}: MarketplaceV2BidsByCreatorCollectionQuery<TData>) {
  return useQuery<ArrayOfBid, Error, TData>(marketplaceV2QueryKeys.bidsByCreatorCollection(client?.contractAddress, args), () => client ? client.bidsByCreatorCollection({
    collection: args.collection,
    creator: args.creator,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2BidsByTokenPriceQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfBid, TData> {
  args: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPriceOffset;
    tokenId: string;
  };
}
export function useMarketplaceV2BidsByTokenPriceQuery<TData = ArrayOfBid>({
  client,
  args,
  options
}: MarketplaceV2BidsByTokenPriceQuery<TData>) {
  return useQuery<ArrayOfBid, Error, TData>(marketplaceV2QueryKeys.bidsByTokenPrice(client?.contractAddress, args), () => client ? client.bidsByTokenPrice({
    collection: args.collection,
    denom: args.denom,
    queryOptions: args.queryOptions,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2BidsQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfBid, TData> {}
export function useMarketplaceV2BidsQuery<TData = ArrayOfBid>({
  client,
  options
}: MarketplaceV2BidsQuery<TData>) {
  return useQuery<ArrayOfBid, Error, TData>(marketplaceV2QueryKeys.bids(client?.contractAddress), () => client ? client.bids() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2BidQuery<TData> extends MarketplaceV2ReactQuery<NullableBid, TData> {}
export function useMarketplaceV2BidQuery<TData = NullableBid>({
  client,
  options
}: MarketplaceV2BidQuery<TData>) {
  return useQuery<NullableBid, Error, TData>(marketplaceV2QueryKeys.bid(client?.contractAddress), () => client ? client.bid() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AsksByCreatorCollectionQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfAsk, TData> {
  args: {
    collection: string;
    creator: string;
    queryOptions?: QueryOptionsForString;
  };
}
export function useMarketplaceV2AsksByCreatorCollectionQuery<TData = ArrayOfAsk>({
  client,
  args,
  options
}: MarketplaceV2AsksByCreatorCollectionQuery<TData>) {
  return useQuery<ArrayOfAsk, Error, TData>(marketplaceV2QueryKeys.asksByCreatorCollection(client?.contractAddress, args), () => client ? client.asksByCreatorCollection({
    collection: args.collection,
    creator: args.creator,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AsksByCollectionDenomQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfAsk, TData> {
  args: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPriceOffset;
  };
}
export function useMarketplaceV2AsksByCollectionDenomQuery<TData = ArrayOfAsk>({
  client,
  args,
  options
}: MarketplaceV2AsksByCollectionDenomQuery<TData>) {
  return useQuery<ArrayOfAsk, Error, TData>(marketplaceV2QueryKeys.asksByCollectionDenom(client?.contractAddress, args), () => client ? client.asksByCollectionDenom({
    collection: args.collection,
    denom: args.denom,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AsksQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfAsk, TData> {}
export function useMarketplaceV2AsksQuery<TData = ArrayOfAsk>({
  client,
  options
}: MarketplaceV2AsksQuery<TData>) {
  return useQuery<ArrayOfAsk, Error, TData>(marketplaceV2QueryKeys.asks(client?.contractAddress), () => client ? client.asks() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AskQuery<TData> extends MarketplaceV2ReactQuery<NullableAsk, TData> {}
export function useMarketplaceV2AskQuery<TData = NullableAsk>({
  client,
  options
}: MarketplaceV2AskQuery<TData>) {
  return useQuery<NullableAsk, Error, TData>(marketplaceV2QueryKeys.ask(client?.contractAddress), () => client ? client.ask() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AllowDenomsQuery<TData> extends MarketplaceV2ReactQuery<AllowDenoms, TData> {}
export function useMarketplaceV2AllowDenomsQuery<TData = AllowDenoms>({
  client,
  options
}: MarketplaceV2AllowDenomsQuery<TData>) {
  return useQuery<AllowDenoms, Error, TData>(marketplaceV2QueryKeys.allowDenoms(client?.contractAddress), () => client ? client.allowDenoms() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2ConfigQuery<TData> extends MarketplaceV2ReactQuery<ConfigForAddr, TData> {}
export function useMarketplaceV2ConfigQuery<TData = ConfigForAddr>({
  client,
  options
}: MarketplaceV2ConfigQuery<TData>) {
  return useQuery<ConfigForAddr, Error, TData>(marketplaceV2QueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}