/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { AllowDenoms, InstantiateMsg, ConfigForString, ExecuteMsg, Uint128, OrderDetailsForString, Coin, QueryMsg, QueryBoundForPriceOffset, QueryBoundForString, QueryOptionsForPriceOffset, PriceOffset, QueryOptionsForString, NullableAsk, Addr, Ask, OrderDetailsForAddr, ArrayOfAsk, NullableCollectionOffer, CollectionOffer, ArrayOfCollectionOffer, ConfigForAddr, NullableOffer, Offer, ArrayOfOffer } from "./MarketplaceV2.types";
import { MarketplaceV2QueryClient } from "./MarketplaceV2.client";
export const marketplaceV2QueryKeys = {
  contract: ([{
    contract: "marketplaceV2"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...marketplaceV2QueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  allowDenoms: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "allow_denoms",
    args
  }] as const),
  ask: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "ask",
    args
  }] as const),
  asks: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "asks",
    args
  }] as const),
  asksByCollectionDenom: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "asks_by_collection_denom",
    args
  }] as const),
  asksByCreatorCollection: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "asks_by_creator_collection",
    args
  }] as const),
  offer: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "offer",
    args
  }] as const),
  offers: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "offers",
    args
  }] as const),
  offersByTokenPrice: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "offers_by_token_price",
    args
  }] as const),
  offersByCreatorCollection: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "offers_by_creator_collection",
    args
  }] as const),
  collectionOffer: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "collection_offer",
    args
  }] as const),
  collectionOffers: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "collection_offers",
    args
  }] as const),
  collectionOffersByPrice: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "collection_offers_by_price",
    args
  }] as const),
  collectionOffersByCreatorCollection: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marketplaceV2QueryKeys.address(contractAddress)[0],
    method: "collection_offers_by_creator_collection",
    args
  }] as const)
};
export const marketplaceV2Queries = {
  config: <TData = ConfigForAddr,>({
    client,
    options
  }: MarketplaceV2ConfigQuery<TData>): UseQueryOptions<ConfigForAddr, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allowDenoms: <TData = AllowDenoms,>({
    client,
    options
  }: MarketplaceV2AllowDenomsQuery<TData>): UseQueryOptions<AllowDenoms, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.allowDenoms(client?.contractAddress),
    queryFn: () => client ? client.allowDenoms() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ask: <TData = NullableAsk,>({
    client,
    options
  }: MarketplaceV2AskQuery<TData>): UseQueryOptions<NullableAsk, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.ask(client?.contractAddress),
    queryFn: () => client ? client.ask() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  asks: <TData = ArrayOfAsk,>({
    client,
    options
  }: MarketplaceV2AsksQuery<TData>): UseQueryOptions<ArrayOfAsk, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.asks(client?.contractAddress),
    queryFn: () => client ? client.asks() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  asksByCollectionDenom: <TData = ArrayOfAsk,>({
    client,
    args,
    options
  }: MarketplaceV2AsksByCollectionDenomQuery<TData>): UseQueryOptions<ArrayOfAsk, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.asksByCollectionDenom(client?.contractAddress, args),
    queryFn: () => client ? client.asksByCollectionDenom({
      collection: args.collection,
      denom: args.denom,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  asksByCreatorCollection: <TData = ArrayOfAsk,>({
    client,
    args,
    options
  }: MarketplaceV2AsksByCreatorCollectionQuery<TData>): UseQueryOptions<ArrayOfAsk, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.asksByCreatorCollection(client?.contractAddress, args),
    queryFn: () => client ? client.asksByCreatorCollection({
      collection: args.collection,
      creator: args.creator,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  offer: <TData = NullableOffer,>({
    client,
    options
  }: MarketplaceV2OfferQuery<TData>): UseQueryOptions<NullableOffer, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.offer(client?.contractAddress),
    queryFn: () => client ? client.offer() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  offers: <TData = ArrayOfOffer,>({
    client,
    options
  }: MarketplaceV2OffersQuery<TData>): UseQueryOptions<ArrayOfOffer, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.offers(client?.contractAddress),
    queryFn: () => client ? client.offers() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  offersByTokenPrice: <TData = ArrayOfOffer,>({
    client,
    args,
    options
  }: MarketplaceV2OffersByTokenPriceQuery<TData>): UseQueryOptions<ArrayOfOffer, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.offersByTokenPrice(client?.contractAddress, args),
    queryFn: () => client ? client.offersByTokenPrice({
      collection: args.collection,
      denom: args.denom,
      queryOptions: args.queryOptions,
      tokenId: args.tokenId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  offersByCreatorCollection: <TData = ArrayOfOffer,>({
    client,
    args,
    options
  }: MarketplaceV2OffersByCreatorCollectionQuery<TData>): UseQueryOptions<ArrayOfOffer, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.offersByCreatorCollection(client?.contractAddress, args),
    queryFn: () => client ? client.offersByCreatorCollection({
      collection: args.collection,
      creator: args.creator,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  collectionOffer: <TData = NullableCollectionOffer,>({
    client,
    options
  }: MarketplaceV2CollectionOfferQuery<TData>): UseQueryOptions<NullableCollectionOffer, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.collectionOffer(client?.contractAddress),
    queryFn: () => client ? client.collectionOffer() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  collectionOffers: <TData = ArrayOfCollectionOffer,>({
    client,
    options
  }: MarketplaceV2CollectionOffersQuery<TData>): UseQueryOptions<ArrayOfCollectionOffer, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.collectionOffers(client?.contractAddress),
    queryFn: () => client ? client.collectionOffers() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  collectionOffersByPrice: <TData = ArrayOfCollectionOffer,>({
    client,
    args,
    options
  }: MarketplaceV2CollectionOffersByPriceQuery<TData>): UseQueryOptions<ArrayOfCollectionOffer, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.collectionOffersByPrice(client?.contractAddress, args),
    queryFn: () => client ? client.collectionOffersByPrice({
      collection: args.collection,
      denom: args.denom,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  collectionOffersByCreatorCollection: <TData = ArrayOfCollectionOffer,>({
    client,
    args,
    options
  }: MarketplaceV2CollectionOffersByCreatorCollectionQuery<TData>): UseQueryOptions<ArrayOfCollectionOffer, Error, TData> => ({
    queryKey: marketplaceV2QueryKeys.collectionOffersByCreatorCollection(client?.contractAddress, args),
    queryFn: () => client ? client.collectionOffersByCreatorCollection({
      collection: args.collection,
      creator: args.creator,
      queryOptions: args.queryOptions
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface MarketplaceV2ReactQuery<TResponse, TData = TResponse> {
  client: MarketplaceV2QueryClient | undefined;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface MarketplaceV2CollectionOffersByCreatorCollectionQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfCollectionOffer, TData> {
  args: {
    collection: string;
    creator: string;
    queryOptions?: QueryOptionsForString;
  };
}
export function useMarketplaceV2CollectionOffersByCreatorCollectionQuery<TData = ArrayOfCollectionOffer>({
  client,
  args,
  options
}: MarketplaceV2CollectionOffersByCreatorCollectionQuery<TData>) {
  return useQuery<ArrayOfCollectionOffer, Error, TData>(marketplaceV2QueryKeys.collectionOffersByCreatorCollection(client?.contractAddress, args), () => client ? client.collectionOffersByCreatorCollection({
    collection: args.collection,
    creator: args.creator,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2CollectionOffersByPriceQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfCollectionOffer, TData> {
  args: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPriceOffset;
  };
}
export function useMarketplaceV2CollectionOffersByPriceQuery<TData = ArrayOfCollectionOffer>({
  client,
  args,
  options
}: MarketplaceV2CollectionOffersByPriceQuery<TData>) {
  return useQuery<ArrayOfCollectionOffer, Error, TData>(marketplaceV2QueryKeys.collectionOffersByPrice(client?.contractAddress, args), () => client ? client.collectionOffersByPrice({
    collection: args.collection,
    denom: args.denom,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2CollectionOffersQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfCollectionOffer, TData> {}
export function useMarketplaceV2CollectionOffersQuery<TData = ArrayOfCollectionOffer>({
  client,
  options
}: MarketplaceV2CollectionOffersQuery<TData>) {
  return useQuery<ArrayOfCollectionOffer, Error, TData>(marketplaceV2QueryKeys.collectionOffers(client?.contractAddress), () => client ? client.collectionOffers() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2CollectionOfferQuery<TData> extends MarketplaceV2ReactQuery<NullableCollectionOffer, TData> {}
export function useMarketplaceV2CollectionOfferQuery<TData = NullableCollectionOffer>({
  client,
  options
}: MarketplaceV2CollectionOfferQuery<TData>) {
  return useQuery<NullableCollectionOffer, Error, TData>(marketplaceV2QueryKeys.collectionOffer(client?.contractAddress), () => client ? client.collectionOffer() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2OffersByCreatorCollectionQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfOffer, TData> {
  args: {
    collection: string;
    creator: string;
    queryOptions?: QueryOptionsForString;
  };
}
export function useMarketplaceV2OffersByCreatorCollectionQuery<TData = ArrayOfOffer>({
  client,
  args,
  options
}: MarketplaceV2OffersByCreatorCollectionQuery<TData>) {
  return useQuery<ArrayOfOffer, Error, TData>(marketplaceV2QueryKeys.offersByCreatorCollection(client?.contractAddress, args), () => client ? client.offersByCreatorCollection({
    collection: args.collection,
    creator: args.creator,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2OffersByTokenPriceQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfOffer, TData> {
  args: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPriceOffset;
    tokenId: string;
  };
}
export function useMarketplaceV2OffersByTokenPriceQuery<TData = ArrayOfOffer>({
  client,
  args,
  options
}: MarketplaceV2OffersByTokenPriceQuery<TData>) {
  return useQuery<ArrayOfOffer, Error, TData>(marketplaceV2QueryKeys.offersByTokenPrice(client?.contractAddress, args), () => client ? client.offersByTokenPrice({
    collection: args.collection,
    denom: args.denom,
    queryOptions: args.queryOptions,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2OffersQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfOffer, TData> {}
export function useMarketplaceV2OffersQuery<TData = ArrayOfOffer>({
  client,
  options
}: MarketplaceV2OffersQuery<TData>) {
  return useQuery<ArrayOfOffer, Error, TData>(marketplaceV2QueryKeys.offers(client?.contractAddress), () => client ? client.offers() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2OfferQuery<TData> extends MarketplaceV2ReactQuery<NullableOffer, TData> {}
export function useMarketplaceV2OfferQuery<TData = NullableOffer>({
  client,
  options
}: MarketplaceV2OfferQuery<TData>) {
  return useQuery<NullableOffer, Error, TData>(marketplaceV2QueryKeys.offer(client?.contractAddress), () => client ? client.offer() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AsksByCreatorCollectionQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfAsk, TData> {
  args: {
    collection: string;
    creator: string;
    queryOptions?: QueryOptionsForString;
  };
}
export function useMarketplaceV2AsksByCreatorCollectionQuery<TData = ArrayOfAsk>({
  client,
  args,
  options
}: MarketplaceV2AsksByCreatorCollectionQuery<TData>) {
  return useQuery<ArrayOfAsk, Error, TData>(marketplaceV2QueryKeys.asksByCreatorCollection(client?.contractAddress, args), () => client ? client.asksByCreatorCollection({
    collection: args.collection,
    creator: args.creator,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AsksByCollectionDenomQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfAsk, TData> {
  args: {
    collection: string;
    denom: string;
    queryOptions?: QueryOptionsForPriceOffset;
  };
}
export function useMarketplaceV2AsksByCollectionDenomQuery<TData = ArrayOfAsk>({
  client,
  args,
  options
}: MarketplaceV2AsksByCollectionDenomQuery<TData>) {
  return useQuery<ArrayOfAsk, Error, TData>(marketplaceV2QueryKeys.asksByCollectionDenom(client?.contractAddress, args), () => client ? client.asksByCollectionDenom({
    collection: args.collection,
    denom: args.denom,
    queryOptions: args.queryOptions
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AsksQuery<TData> extends MarketplaceV2ReactQuery<ArrayOfAsk, TData> {}
export function useMarketplaceV2AsksQuery<TData = ArrayOfAsk>({
  client,
  options
}: MarketplaceV2AsksQuery<TData>) {
  return useQuery<ArrayOfAsk, Error, TData>(marketplaceV2QueryKeys.asks(client?.contractAddress), () => client ? client.asks() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AskQuery<TData> extends MarketplaceV2ReactQuery<NullableAsk, TData> {}
export function useMarketplaceV2AskQuery<TData = NullableAsk>({
  client,
  options
}: MarketplaceV2AskQuery<TData>) {
  return useQuery<NullableAsk, Error, TData>(marketplaceV2QueryKeys.ask(client?.contractAddress), () => client ? client.ask() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2AllowDenomsQuery<TData> extends MarketplaceV2ReactQuery<AllowDenoms, TData> {}
export function useMarketplaceV2AllowDenomsQuery<TData = AllowDenoms>({
  client,
  options
}: MarketplaceV2AllowDenomsQuery<TData>) {
  return useQuery<AllowDenoms, Error, TData>(marketplaceV2QueryKeys.allowDenoms(client?.contractAddress), () => client ? client.allowDenoms() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarketplaceV2ConfigQuery<TData> extends MarketplaceV2ReactQuery<ConfigForAddr, TData> {}
export function useMarketplaceV2ConfigQuery<TData = ConfigForAddr>({
  client,
  options
}: MarketplaceV2ConfigQuery<TData>) {
  return useQuery<ConfigForAddr, Error, TData>(marketplaceV2QueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}